###############################################################################
# Prelude
###############################################################################
# The main goals of this pipeline are to:
# - check that ocaml-tree-sitter builds correctly all our languages and
#   make sure our core tests and language tests pass
# - have a cron that update our tree-sitter parsing statistics
#   which are then accessible at https://dashboard.semgrep.dev/metrics
#   and also at https://metabase.corp.r2c.dev/collection/59-semgrep

version: 2.1

###############################################################################
# The jobs
###############################################################################

jobs:

  test-language:
    docker:
      - image: returntocorp/ocaml:ubuntu

    # 'tree-sitter generate' needs a lot of memory. CircleCI offers
    # the following types of hosts:
    # - medium+: 6 GB
    # - large: 8 GB
    # - xlarge: 16 GB
    #old:
    #   resource_class: xlarge
    # but we're not paying anymore for circleCI, to consolidate Github Actions
    #TODO: port this workflow to GHA

    working_directory: ~/ocaml-tree-sitter
    parameters:
      # tree-sitter language = XXX in the repo name tree-sitter-XXX
      language:
        type: string
    steps:
      - checkout
      - run: git submodule update --init --recursive --depth 1
      - run:
          name: install nodejs and cargo
          command: ./core/scripts/setup-node
      - run: opam exec -- make setup
      - run: opam exec -- make
      - run: opam exec -- make install
      - run: opam exec -- make -C core test
      - run:
          # A bunch of parsers fail to build with tree-sitter 0.22.6
          # and need to be upgraded.
          # Some parsers won't build due to 'tree-sitter generate'
          # using too much memory: c-sharp, hack
          # Programmers should check the list of failed languages
          # printed at the end of the CI job and proceed to merge
          # their PR responsibly.
          name: "test languages (known to fail for some languages)"
          no_output_timeout: 60m
          command: |
            eval "$(opam env)"
            cd lang
            ./test-lang << parameters.language >>

  # The parsing stat crons is now split in 2 (stat1 and stat2) because
  # even with performance circle CI plan, we hit the 3h limit.
  #
  #alt: instead of redoing some of the work done in the build job,
  # we could store build artifacts in this build job that we could
  # just reuse here (which is what we do in semgrep CI).
  #
  #alt: instead of this split, we could run the parsing stats in parallel
  # (like we do in semgrep CI)
  stat1:
    docker:
      - image: returntocorp/ocaml:ubuntu
    # See earlier note about memory requirements.
    # resource_class: xlarge
    working_directory: ~/ocaml-tree-sitter
    steps:
      - checkout
      - run: git submodule update --init --recursive --depth 1
      - run:
          name: install nodejs and cargo
          command: ./core/scripts/setup-node
      - run: opam exec -- make setup
      - run: opam exec -- make
      - run: opam exec -- make install
      - run:
          name: run parsing stats
          no_output_timeout: 180m
          command: opam exec -- make stat1
      - run:
          name: upload parsing stats
          command: python3 ./scripts/upload-stat lang/stat.txt
      - store_artifacts:
          path: lang/stat.txt

  # Mostly a copy-paste of stat1 but with make stat2
  stat2:
    docker:
      - image: returntocorp/ocaml:ubuntu
    # resource_class: xlarge
    working_directory: ~/ocaml-tree-sitter
    steps:
      - checkout
      - run: git submodule update --init --recursive --depth 1
      - run:
          name: install nodejs and cargo
          command: ./core/scripts/setup-node
      - run: opam exec -- make setup
      - run: opam exec -- make
      - run: opam exec -- make install
      - run:
          name: run parsing stats
          no_output_timeout: 180m
          command: opam exec -- make stat2
      - run:
          name: upload parsing stats
          command: python3 ./scripts/upload-stat lang/stat.txt
      - store_artifacts:
          path: lang/stat.txt

###############################################################################
# The workflows
###############################################################################

workflows:
  version: 2

  build-on-commit:
    # Default trigger, on commit.
    jobs:
      - test-language:
          matrix:
            parameters:
              # All the tree-sitter languages we want to test
              # This is all or a subset of SUPPORTED_TS_LANGUAGES in
              # lang/Makefile.
              language:
                - bash
                - c
                - cairo
                - circom
                - clojure
                - cpp
                - c-sharp
                - c-sharp-pro
                - dart
                - dockerfile
                - elixir
                - fsharp
                - go
                - hack
                - haskell
                - hcl
                - html
                - java
                - javascript
                - jsonnet
                - julia
                - kotlin
                - lua
                - make
                - move-on-aptos
                - move-on-sui
                - ocaml
                - php
                - promql
                - proto
                - python
                - ql
                - r
                - ruby
                - rust
                - sfapex
                - sml
                - solidity
                - sqlite
                - swift
                - toml
                - typescript
                - vue

  # We used to run this job everyday, but now we use a more expensive resource_class
  # and we don't really need those stats to be up-to-date by the day, so
  # we now run this cron twice a week.
  # 
  # cron table memento below
  # (src: https://dev.to/anshuman_bhardwaj/free-cron-jobs-with-github-actions-31d6)
  # ┌────────── minute (0 - 59)
  # │ ┌────────── hour (0 - 23)
  # │ │ ┌────────── day of the month (1 - 31)
  # │ │ │ ┌────────── month (1 - 12)
  # │ │ │ │ ┌────────── day of the week (0 - 6)
  # │ │ │ │ │
  # │ │ │ │ │
  # │ │ │ │ │
  # * * * * *
  scheduled-stats1:
    triggers:
      - schedule:
          # Run at 00:00 every monday and thursday, UTC.
          cron: "0 0 * * 0,3"
          filters:
            branches:
              only:
                - main
    jobs:
      - stat1:
          # Run only on these branches (each pushing different images)
          filters:
            branches:
              only:
                - main

  scheduled-stats2:
    triggers:
      - schedule:
          cron: "0 6 * * 0,3"
          filters:
            branches:
              only:
                - main
    jobs:
      - stat2:
          # Run only on these branches (each pushing different images)
          filters:
            branches:
              only:
                - main

  # This is for testing or for forcing a stats job. Requires pushing
  # to a branch named 'stats'.
  stats-on-commit:
    jobs:
      # This just trigger stat1. We could have another special branch to
      # trigger stat2 on-commit.
      - stat1:
          filters:
            branches:
              only:
                - stats
