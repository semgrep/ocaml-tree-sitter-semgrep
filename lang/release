#! /usr/bin/env bash
#
# Place the generated files into their own repo, to be used by an external
# repo as a submodule.
#
set -eu -o pipefail

prog_name=$(basename "$0")

usage() {
  cat <<EOF
** This may be done only after running 'test-lang'. **

Publish generated code to an external repository for a specific language.

Sublanguages defined in the same tree-sitter-LANG project are considered
different at this stage, e.g. 'tree-sitter-typescript' provides grammars
for 'typescript' and for 'tsx'. You need to release both:

  ./$prog_name typescript
  ./$prog_name tsx

Usage: $prog_name LANG
Options:
  --dry-run
      Do everything except committing the result to the git repo
      semgrep-LANG. Also, this mode allows running without a
      clean git status in ocaml-tree-sitter. This is useful for testing.
  --help
      Print this message and exit.
EOF
}

error() {
  echo "Error in '$prog_name': $*" >&2
  exit 1
}

lang=''
dry_run=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    --dry-run)
      dry_run=true
      ;;
    --help)
      usage
      exit 0
      ;;
    *)
      if [[ -n "$lang" ]]; then
        error "Exactly one language must be specified on the command line"
      fi
      lang="$1"
  esac
  shift
done

if [[ -z "$lang" ]]; then
  error "Missing language. See --help for usage."
fi

# Language-specific options
GEN_OCAML_OPTIONS=""
case "$lang" in
  apex|c-sharp-pro|elixir)
    GEN_OCAML_OPTIONS="--package tree-sitter-lang-pro"
    ;;
  *)
esac

id=$(git rev-parse --short HEAD)

if [[ "$dry_run" = false ]]; then

  # clean up for repos missing a proper .gitignore
  find semgrep-grammars -name node_modules -or -name build -type d | xargs rm -rf

  if [[ -n "$(git status --porcelain)" ]]; then
    cat 2>&1 <<EOF
git status is not clean.

Possible resolutions:
- pass the --dry-run option to $prog_name.
- add and commit files until 'git status' shows a clean status.
EOF
    exit 1
  fi
fi

opt_run() {
  if [[ "$dry_run" = true ]]; then
    echo "[dry run] $*"
  else
    echo "[run] $*"
    "$@"
  fi
}

print_version_info() {
  dir=$(dirname "$path")
  cat <<EOF
File: $path
Git repo name: $(basename "$(git -C "$dir" rev-parse --show-toplevel)")
Latest commit in repo: $(git -C "$dir" rev-parse HEAD)
Last change in file:
$(git -C "$dir" log -1 "$(basename "$path")" | sed -e 's/^/  /')
---
EOF
}

# Copy interesting files, such as the original grammar or the license.
#
# e.g.:
#   $ cat lang/go/fyi.list
#   semgrep-grammars/src/tree-sitter-go/grammar.js
#   semgrep-grammars/src/tree-sitter-go/LICENSE
#   semgrep-grammars/src/semgrep-go/grammar.js
#
copy_fyi_files() {
  if [[ -e "$fyi_list" ]]; then
    paths=$(cat "$fyi_list" | grep -v '^ *#' | grep -v '^ *$')

    mkdir -p "$fyi_dst"

    # It would be nice if the path to tree-sitter came from an included
    # config file but we only have an includable makefile at the moment.
    ../core/tree-sitter/bin/tree-sitter --version \
      > "$fyi_dst"/tree-sitter-version

    # Record the git commit of each "FYI" file.
    version_file="$fyi_dst"/versions
    rm -f "$version_file"

    for path in $paths; do
      local src=$path
      local dst=$fyi_dst/$path
      if [[ ! -e "$src" ]]; then
        error "[$(pwd)] Missing file specified in fyi.list: $src"
      fi
      mkdir -p $(dirname "$dst")
      cp "$src" "$dst"

      print_version_info >> "$version_file"
    done
  fi
}

export_dir="export"
mkdir -p "$export_dir"
repo="semgrep-$lang"

(
  cd "$export_dir"
  if [[ ! -d "$repo" ]]; then
    git clone git@github.com:semgrep/"$repo".git
  fi
)

branch=$(git -C "$export_dir/$repo" rev-parse --abbrev-ref HEAD)
echo "[$export_dir/$repo] Pulling branch '$branch'"
git -C "$export_dir/$repo" pull origin "$branch" --ff-only

# Copy the files that we find.
#
make -C "$lang" clean
make -C "$lang" GEN_OCAML_OPTIONS="$GEN_OCAML_OPTIONS" gen
dst="$export_dir"/"$repo"
if [[ -d "$lang"/ocaml-src ]]; then
  # Make sure obsolete files are removed from the release repo
  git -C "$dst" rm -rf --ignore-unmatch lib bin

  cp -a "$lang"/ocaml-src/lib "$dst"
  cp -a "$lang"/ocaml-src/bin "$dst"
  cp -a "$lang"/ocaml-src/.gitignore "$dst"
  cp -a "$lang"/ocaml-src/config "$dst"

  fyi_list="$lang"/fyi.list
  fyi_dst="$dst/fyi"
  copy_fyi_files
else
  error "Missing folder $lang/ocaml-src"
fi

(
  cd "$dst"
  git add .
  git status
  if [[ -n "$(git status --porcelain)" ]]; then
    opt_run git commit -m "Release files generated by ocaml-tree-sitter $id."
    opt_run git push origin "$branch"
  fi
)

if [[ -d ocaml-tree-sitter-lang ]]; then
  cat <<EOF
Warning: you still have an 'ocaml-tree-sitter-lang' folder.
We no longer use it. Instead, generated code is placed into:

  $dst

which has its own repo.
EOF
fi
